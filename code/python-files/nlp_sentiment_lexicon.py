# -*- coding: utf-8 -*-
"""nlp-sentiment-lexicon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K6We7F11aTsrdr8lRxThFtFMXdoD5Nke
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from spacy.tokenizer import Tokenizer
from spacy.lang.en import English
from sklearn.metrics import precision_recall_fscore_support, classification_report

words = pd.read_csv('/content/drive/Shareddrives/NLP/2000.tsv', sep='\t', header=None, index_col=0)
dataset = pd.read_json('/content/drive/Shareddrives/NLP/reviews_Video_Games_5.json', lines=True)
lang = English()
dataset

y_actual, y_prediction = [], []

idx, err_count = 0, 0
successful_classifications = 0
for review in dataset['reviewText']:
  if dataset['overall'].values[idx] >= 3:
    label = "positive"
  else:
    label = "negative"
  sentiment_score = 0
  for token in lang(review):
    try:
      sentiment_score += words.loc[token.text.lower()][1]
    except KeyError as k:
      err_count += 1
  if sentiment_score > 0:
    if label == 'positive':
      y_actual.append(1)
    else:
      y_actual.append(0)
    y_prediction.append(1)
  else:
    if label == 'positive':
      y_actual.append(1)
    else:
      y_actual.append(0)
    y_prediction.append(0)
  if label is "negative" and sentiment_score < 0:
    successful_classifications += 1
  elif label is "positive" and sentiment_score >= 0:
    successful_classifications += 1
  idx += 1

print(classification_report(y_actual, y_prediction))