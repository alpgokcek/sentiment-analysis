# -*- coding: utf-8 -*-
"""nlp-sentiment-word2vec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QOcoWdAqtnMxsL_Aqc0W7RjzqhZuJvbg
"""

!python3 -m spacy download en_core_web_md

from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
import json, random, spacy, en_core_web_sm
import pandas as pd
import numpy as np
import pandas as pd

dataset_path = '/content/drive/Shareddrives/NLP/reviews_Video_Games_5.json'

model = en_core_web_sm.load()

def feature_extraction(text):
    vector = np.zeros(500)
    doc = model(text)
    for idx, token in enumerate(doc):
        initial_vector = doc[idx].vector.copy()
        initial_vector.resize(vector.shape)
        vector += initial_vector
    return vector

df = pd.read_json(dataset_path, lines=True)
texts, labels = df['reviewText'].values, df['overall'].values
train_texts, test_texts, train_labels, test_labels = train_test_split(texts, labels, test_size = .5)

X_train, y_train = [], []
X_test, y_test = [], []

test_data, train_data = zip(test_labels, test_texts), zip(train_labels, train_texts)

for (label, text) in train_data:
    try:
      X_train.append(feature_extraction(text))
      y_train.append(1 if label >= 3 else 0)
    except:
      pass
for (label, text) in test_data:
    try:
      X_test.append(feature_extraction(text))
      y_test.append(1 if label >= 3 else 0)
    except:
      pass

tuned_parameters = {
    'hidden_layer_sizes': [(50,100,50)],
    'activation': ['relu'],
    'solver': ['sgd', 'adam'],
    'alpha': [0.00001],
    'learning_rate': ['constant','adaptive'],
}

model = MLPClassifier(max_iter=1000)
clf = GridSearchCV(model, tuned_parameters, scoring='recall_macro', n_jobs=-1, verbose=5, cv=2)
clf.fit(X_train, y_train)

y_true, y_pred = y_test, clf.predict(X_test)
print(classification_report(y_true, y_pred))